/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "github.com/vmware/global-load-balancing-services-for-kubernetes/pkg/apis/amko/v1alpha2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GlobalDeploymentPolicyLister helps list GlobalDeploymentPolicies.
// All objects returned here must be treated as read-only.
type GlobalDeploymentPolicyLister interface {
	// List lists all GlobalDeploymentPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.GlobalDeploymentPolicy, err error)
	// GlobalDeploymentPolicies returns an object that can list and get GlobalDeploymentPolicies.
	GlobalDeploymentPolicies(namespace string) GlobalDeploymentPolicyNamespaceLister
	GlobalDeploymentPolicyListerExpansion
}

// globalDeploymentPolicyLister implements the GlobalDeploymentPolicyLister interface.
type globalDeploymentPolicyLister struct {
	indexer cache.Indexer
}

// NewGlobalDeploymentPolicyLister returns a new GlobalDeploymentPolicyLister.
func NewGlobalDeploymentPolicyLister(indexer cache.Indexer) GlobalDeploymentPolicyLister {
	return &globalDeploymentPolicyLister{indexer: indexer}
}

// List lists all GlobalDeploymentPolicies in the indexer.
func (s *globalDeploymentPolicyLister) List(selector labels.Selector) (ret []*v1alpha2.GlobalDeploymentPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.GlobalDeploymentPolicy))
	})
	return ret, err
}

// GlobalDeploymentPolicies returns an object that can list and get GlobalDeploymentPolicies.
func (s *globalDeploymentPolicyLister) GlobalDeploymentPolicies(namespace string) GlobalDeploymentPolicyNamespaceLister {
	return globalDeploymentPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GlobalDeploymentPolicyNamespaceLister helps list and get GlobalDeploymentPolicies.
// All objects returned here must be treated as read-only.
type GlobalDeploymentPolicyNamespaceLister interface {
	// List lists all GlobalDeploymentPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.GlobalDeploymentPolicy, err error)
	// Get retrieves the GlobalDeploymentPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha2.GlobalDeploymentPolicy, error)
	GlobalDeploymentPolicyNamespaceListerExpansion
}

// globalDeploymentPolicyNamespaceLister implements the GlobalDeploymentPolicyNamespaceLister
// interface.
type globalDeploymentPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GlobalDeploymentPolicies in the indexer for a given namespace.
func (s globalDeploymentPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.GlobalDeploymentPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.GlobalDeploymentPolicy))
	})
	return ret, err
}

// Get retrieves the GlobalDeploymentPolicy from the indexer for a given namespace and name.
func (s globalDeploymentPolicyNamespaceLister) Get(name string) (*v1alpha2.GlobalDeploymentPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("globaldeploymentpolicy"), name)
	}
	return obj.(*v1alpha2.GlobalDeploymentPolicy), nil
}
