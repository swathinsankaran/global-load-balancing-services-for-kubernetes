/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/vmware/global-load-balancing-services-for-kubernetes/pkg/apis/amko/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GSLBConfigLister helps list GSLBConfigs.
// All objects returned here must be treated as read-only.
type GSLBConfigLister interface {
	// List lists all GSLBConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GSLBConfig, err error)
	// GSLBConfigs returns an object that can list and get GSLBConfigs.
	GSLBConfigs(namespace string) GSLBConfigNamespaceLister
	GSLBConfigListerExpansion
}

// gSLBConfigLister implements the GSLBConfigLister interface.
type gSLBConfigLister struct {
	indexer cache.Indexer
}

// NewGSLBConfigLister returns a new GSLBConfigLister.
func NewGSLBConfigLister(indexer cache.Indexer) GSLBConfigLister {
	return &gSLBConfigLister{indexer: indexer}
}

// List lists all GSLBConfigs in the indexer.
func (s *gSLBConfigLister) List(selector labels.Selector) (ret []*v1alpha1.GSLBConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GSLBConfig))
	})
	return ret, err
}

// GSLBConfigs returns an object that can list and get GSLBConfigs.
func (s *gSLBConfigLister) GSLBConfigs(namespace string) GSLBConfigNamespaceLister {
	return gSLBConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GSLBConfigNamespaceLister helps list and get GSLBConfigs.
// All objects returned here must be treated as read-only.
type GSLBConfigNamespaceLister interface {
	// List lists all GSLBConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GSLBConfig, err error)
	// Get retrieves the GSLBConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.GSLBConfig, error)
	GSLBConfigNamespaceListerExpansion
}

// gSLBConfigNamespaceLister implements the GSLBConfigNamespaceLister
// interface.
type gSLBConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GSLBConfigs in the indexer for a given namespace.
func (s gSLBConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GSLBConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GSLBConfig))
	})
	return ret, err
}

// Get retrieves the GSLBConfig from the indexer for a given namespace and name.
func (s gSLBConfigNamespaceLister) Get(name string) (*v1alpha1.GSLBConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("gslbconfig"), name)
	}
	return obj.(*v1alpha1.GSLBConfig), nil
}
